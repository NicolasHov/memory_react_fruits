{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Button","props","x","y","callback","state","image","onClick","style","width","height","background","objectFit","Game","useState","cards","newArray","forEach","item","_id","push","value","generateCards","array","i","length","j","Math","floor","random","temp","shuffle","concat","map","generateGrid","gameState","setGameState","getPos","gameLaunched","setGameLaunched","counter","setCounter","useEffect","setTimeout","alert","arr","size","buttonClicked","pos","card","filter","updatedGameState","Array","from","flipCard","revealedCards","score","myHeaders","Headers","append","raw","JSON","stringify","fetch","method","headers","body","redirect","mode","then","response","text","result","console","log","catch","error","addHighScore","ceil","v","slice","row","backgroundColor","App","top5","setTop5","highscores","scores","sort","a","b","sign","parse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2155a50.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react'\nimport './App.css'\n\nconst Button = props => {\n  // eslint-disable-next-line react/prop-types\n  const { x, y, callback, state, image } = props\n  return (\n    <button\n      onClick={() => callback(x, y)}\n      style={{ width: '100px', height: '100px', background: state !== 'hidden' ? `url(${image})` : 'none', objectFit: 'fill' }}\n    />\n  )\n}\n\nconst flipCard = (gameState, pos) => {\n  const updatedGameState = Array.from(gameState)\n  updatedGameState[pos].state = updatedGameState[pos].state === 'hidden' ? 'revealed' : 'hidden'\n  return updatedGameState\n}\n\nconst getHighScore = callback => {\n  const requestOptions = {\n    method: 'GET',\n    redirect: 'follow',\n    mode: 'cors'\n  }\n\n  fetch('http://localhost:3000/api/scores/', requestOptions)\n    .then(response => response.text())\n    .then(result => callback(JSON.parse(result)))\n    .catch(error => console.log('error', error))\n}\n\nconst addHighScore = score => {\n  const myHeaders = new Headers()\n  myHeaders.append('Content-Type', 'application/json')\n\n  const raw = JSON.stringify({\n    value: score\n  })\n\n  const requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: raw,\n    redirect: 'follow',\n    mode: 'cors'\n  }\n\n  fetch('http://localhost:3000/api/scores/', requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log('error', error))\n}\n\nconst Game = () => {\n  /// GENERATE BOARD ///\n\n  const generateCards = () => {\n    const fruitsArray = ['pomme-rouge', 'banane', 'orange', 'citron-vert', 'grenade', 'abricot', 'citron', 'fraise', 'pomme-verte', 'pêche', 'raisin', 'pastèque', 'prune', 'poire', 'cerise-rouge', 'framboise', 'mangue', 'cerise-jaune']\n    const newArray = []\n    fruitsArray.forEach((item, _id) => {\n      newArray.push({ state: 'hidden', value: item, image: (_id < 10) ? 'parts-0' + _id + '.png' : 'parts-' + _id + '.png' })\n    })\n    return newArray\n  }\n\n  const shuffle = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1))\n      const temp = array[i]\n      array[i] = array[j]\n      array[j] = temp\n    }\n    return array\n  }\n\n  const generateGrid = () => {\n    const cards = generateCards()\n    return shuffle(cards.concat([...cards.map(x => ({ ...x }))]))\n  }\n\n  const [gameState, setGameState] = useState(generateGrid())\n\n  const WIDTH = 6\n  const getPos = (x, y) => x * WIDTH + y\n\n  /// TIMER LOGIC ///\n\n  const TIME = 60\n\n  const [gameLaunched, setGameLaunched] = useState(false)\n  const [counter, setCounter] = useState(TIME)\n\n  useEffect(() => {\n    if (!gameLaunched) {\n      return\n    }\n    if (counter > 0) {\n      setTimeout(() => setCounter(counter - 1), 1000)\n    } else {\n      alert('YOU LOSE!')\n      setGameLaunched(false)\n      setCounter(TIME)\n      // TODO: regenerate\n    }\n  }, [gameLaunched, counter])\n\n  /// PLAYER ACTION ///\n\n  const buttonClicked = (x, y) => {\n    setGameLaunched(true)\n\n    const pos = getPos(x, y)\n    const card = gameState[pos]\n\n    if (card.state === 'removed') {\n      return // do nothing if the card is alredy removed\n    }\n\n    if (gameState.filter(x => x.state === 'revealed').length >= 2 && card.state === 'hidden') {\n      return // do nothing if there is 2 card already revealed & the card on which I clicked is hidden\n    }\n\n    setGameState(flipCard(gameState, pos))\n\n    const revealedCards = gameState.filter(x => x.state === 'revealed')\n    if (revealedCards.length === 2 && revealedCards[0].value === revealedCards[1].value) {\n      revealedCards.forEach(x => { x.state = 'removed' })\n    }\n\n    if (gameState.filter(x => x.state === 'removed').length === gameState.length) {\n      addHighScore(counter)\n      alert('YOU WIN! Score: ' + counter)\n    }\n  }\n\n  const chunk = (arr, size) =>\n    Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>\n      arr.slice(i * size, i * size + size)\n    )\n\n  return (\n    <>\n      <div>\n        {chunk(gameState, WIDTH).map((row, i) => <div key={i}>{row.map((item, j) =>\n          <Button key={getPos(i, j)} x={i} y={j} value={item.value} callback={buttonClicked} state={item.state} image={item.image} />\n        )}</div>)}\n      </div>\n      <div>Countdown: {counter}</div>\n      <div style={{ width: ((TIME - counter) * 0.6) + 'rem', height: '3rem', backgroundColor: 'red' }} />\n    </>\n  )\n}\n\nconst App = () => {\n  const [top5, setTop5] = useState([])\n\n  getHighScore(highscores => {\n    if (top5.length) return\n    setTop5(highscores.scores.sort((a, b) => Math.sign(b.value - a.value)).slice(0, 5))\n  })\n\n  return (\n    <>\n      <div>\n        <h2>Last Scores</h2>\n        <ul>{top5.map(x => (<li key={x._id}>{x.value}</li>))}</ul>\n      </div>\n      <Game />\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}